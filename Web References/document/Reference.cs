//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ApiSampleFramework.document {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ApiServiceDocumentSoap", Namespace="urn:ApiServiceDocument")]
    public partial class ApiServiceDocument : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private UsernameToken usernameTokenValueField;
        
        private System.Threading.SendOrPostCallback uploadDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDocumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentPreviewOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ApiServiceDocument() {
            this.Url = global::ApiSampleFramework.Properties.Settings.Default.ApiSampleFramework_document_ApiServiceDocument;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public UsernameToken UsernameTokenValue {
            get {
                return this.usernameTokenValueField;
            }
            set {
                this.usernameTokenValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event uploadDocumentCompletedEventHandler uploadDocumentCompleted;
        
        /// <remarks/>
        public event downloadDocumentCompletedEventHandler downloadDocumentCompleted;
        
        /// <remarks/>
        public event deleteDocumentsCompletedEventHandler deleteDocumentsCompleted;
        
        /// <remarks/>
        public event checkDocumentCompletedEventHandler checkDocumentCompleted;
        
        /// <remarks/>
        public event getDocumentPreviewCompletedEventHandler getDocumentPreviewCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#uploadDocument", RequestNamespace="urn:ApiServiceDocument", ResponseNamespace="urn:ApiServiceDocument")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseDocUpload uploadDocument([System.Xml.Serialization.SoapElementAttribute("uploadDocument")] FaxDocument uploadDocument1) {
            object[] results = this.Invoke("uploadDocument", new object[] {
                        uploadDocument1});
            return ((ApiResponseDocUpload)(results[0]));
        }
        
        /// <remarks/>
        public void uploadDocumentAsync(FaxDocument uploadDocument1) {
            this.uploadDocumentAsync(uploadDocument1, null);
        }
        
        /// <remarks/>
        public void uploadDocumentAsync(FaxDocument uploadDocument1, object userState) {
            if ((this.uploadDocumentOperationCompleted == null)) {
                this.uploadDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadDocumentOperationCompleted);
            }
            this.InvokeAsync("uploadDocument", new object[] {
                        uploadDocument1}, this.uploadDocumentOperationCompleted, userState);
        }
        
        private void OnuploadDocumentOperationCompleted(object arg) {
            if ((this.uploadDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadDocumentCompleted(this, new uploadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#downloadDocument", RequestNamespace="urn:ApiServiceDocument", ResponseNamespace="urn:ApiServiceDocument")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseFileDownload downloadDocument(string documentRef) {
            object[] results = this.Invoke("downloadDocument", new object[] {
                        documentRef});
            return ((ApiResponseFileDownload)(results[0]));
        }
        
        /// <remarks/>
        public void downloadDocumentAsync(string documentRef) {
            this.downloadDocumentAsync(documentRef, null);
        }
        
        /// <remarks/>
        public void downloadDocumentAsync(string documentRef, object userState) {
            if ((this.downloadDocumentOperationCompleted == null)) {
                this.downloadDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadDocumentOperationCompleted);
            }
            this.InvokeAsync("downloadDocument", new object[] {
                        documentRef}, this.downloadDocumentOperationCompleted, userState);
        }
        
        private void OndownloadDocumentOperationCompleted(object arg) {
            if ((this.downloadDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadDocumentCompleted(this, new downloadDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#deleteDocuments", RequestNamespace="urn:ApiServiceDocument", ResponseNamespace="urn:ApiServiceDocument")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponse deleteDocuments(string[] documentRefs) {
            object[] results = this.Invoke("deleteDocuments", new object[] {
                        documentRefs});
            return ((ApiResponse)(results[0]));
        }
        
        /// <remarks/>
        public void deleteDocumentsAsync(string[] documentRefs) {
            this.deleteDocumentsAsync(documentRefs, null);
        }
        
        /// <remarks/>
        public void deleteDocumentsAsync(string[] documentRefs, object userState) {
            if ((this.deleteDocumentsOperationCompleted == null)) {
                this.deleteDocumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDocumentsOperationCompleted);
            }
            this.InvokeAsync("deleteDocuments", new object[] {
                        documentRefs}, this.deleteDocumentsOperationCompleted, userState);
        }
        
        private void OndeleteDocumentsOperationCompleted(object arg) {
            if ((this.deleteDocumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDocumentsCompleted(this, new deleteDocumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#checkDocument", RequestNamespace="urn:ApiServiceDocument", ResponseNamespace="urn:ApiServiceDocument")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseDocUpload checkDocument(string documentRef) {
            object[] results = this.Invoke("checkDocument", new object[] {
                        documentRef});
            return ((ApiResponseDocUpload)(results[0]));
        }
        
        /// <remarks/>
        public void checkDocumentAsync(string documentRef) {
            this.checkDocumentAsync(documentRef, null);
        }
        
        /// <remarks/>
        public void checkDocumentAsync(string documentRef, object userState) {
            if ((this.checkDocumentOperationCompleted == null)) {
                this.checkDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckDocumentOperationCompleted);
            }
            this.InvokeAsync("checkDocument", new object[] {
                        documentRef}, this.checkDocumentOperationCompleted, userState);
        }
        
        private void OncheckDocumentOperationCompleted(object arg) {
            if ((this.checkDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkDocumentCompleted(this, new checkDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#getDocumentPreview", RequestNamespace="urn:ApiServiceDocument", ResponseNamespace="urn:ApiServiceDocument")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseDocPreview getDocumentPreview(string documentRef, FaxQuality quality, FaxMode conversion) {
            object[] results = this.Invoke("getDocumentPreview", new object[] {
                        documentRef,
                        quality,
                        conversion});
            return ((ApiResponseDocPreview)(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentPreviewAsync(string documentRef, FaxQuality quality, FaxMode conversion) {
            this.getDocumentPreviewAsync(documentRef, quality, conversion, null);
        }
        
        /// <remarks/>
        public void getDocumentPreviewAsync(string documentRef, FaxQuality quality, FaxMode conversion, object userState) {
            if ((this.getDocumentPreviewOperationCompleted == null)) {
                this.getDocumentPreviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentPreviewOperationCompleted);
            }
            this.InvokeAsync("getDocumentPreview", new object[] {
                        documentRef,
                        quality,
                        conversion}, this.getDocumentPreviewOperationCompleted, userState);
        }
        
        private void OngetDocumentPreviewOperationCompleted(object arg) {
            if ((this.getDocumentPreviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentPreviewCompleted(this, new getDocumentPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public partial class UsernameToken : SoapHeader {
        
        private string usernameField;
        
        private string passwordField;
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseDocUpload))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseFileDownload))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseDocPreview))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public partial class ApiResponse {
        
        private StateCodes stateCodeField;
        
        private string stateMessageField;
        
        /// <remarks/>
        public StateCodes stateCode {
            get {
                return this.stateCodeField;
            }
            set {
                this.stateCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string stateMessage {
            get {
                return this.stateMessageField;
            }
            set {
                this.stateMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public enum StateCodes {
        
        /// <remarks/>
        SUCCESS,
        
        /// <remarks/>
        API_FUNCTION_MISSING,
        
        /// <remarks/>
        API_FUNCTION_UNKNOWN,
        
        /// <remarks/>
        API_FUNCTION_ACCESS_DENIED,
        
        /// <remarks/>
        API_AGENT_MISSING,
        
        /// <remarks/>
        API_AGENT_NOT_FOUND,
        
        /// <remarks/>
        API_AGENT_DEACTIVATED,
        
        /// <remarks/>
        API_AGENT_KEY_NOT_MATCH,
        
        /// <remarks/>
        API_CUSTOMER_MISSING,
        
        /// <remarks/>
        API_CUSTOMER_NOT_FOUND,
        
        /// <remarks/>
        API_CUSTOMER_DEACTIVATED,
        
        /// <remarks/>
        API_CUSTOMER_KEY_NOT_MATCH,
        
        /// <remarks/>
        API_CUSTOMER_FEATURE_ACCESS_DENIED,
        
        /// <remarks/>
        API_KEY_MISSING,
        
        /// <remarks/>
        API_KEY_NOT_FOUND,
        
        /// <remarks/>
        API_KEY_DEACTIVATED,
        
        /// <remarks/>
        API_KEY_SECRET_NOT_MATCH,
        
        /// <remarks/>
        API_REQUEST_INCOMPLETE,
        
        /// <remarks/>
        API_REQUEST_FAILURE,
        
        /// <remarks/>
        API_REQUEST_VALIDATE,
        
        /// <remarks/>
        FILE_NOT_FOUND,
        
        /// <remarks/>
        FILE_DELETED,
        
        /// <remarks/>
        FILE_ACCESS_DENIED,
        
        /// <remarks/>
        FILE_STORAGE_MISSING,
        
        /// <remarks/>
        FILE_STORAGE_SIZE_MISMATCH,
        
        /// <remarks/>
        FILE_STORAGE_READ_ERROR,
        
        /// <remarks/>
        FILE_EXISTS,
        
        /// <remarks/>
        CUSTOMER_DELETED,
        
        /// <remarks/>
        CUSTOMER_NOT_CONFIRMED,
        
        /// <remarks/>
        CUSTOMER_BLOCKED,
        
        /// <remarks/>
        CUSTOMER_INACTIVE,
        
        /// <remarks/>
        CUSTOMER_WRONG_PASSWORD,
        
        /// <remarks/>
        CUSTOMER_PASSWORD_NOT_MATCH,
        
        /// <remarks/>
        CUSTOMER_CURRENT_PASSWORD_NOT_MATCH,
        
        /// <remarks/>
        CUSTOMER_EMAIL_IN_USE,
        
        /// <remarks/>
        CUSTOMER_SOCIAL_IN_USE,
        
        /// <remarks/>
        FILE_REFERENCE_DUPLICATE,
        
        /// <remarks/>
        FILE_STORAGE_COPY,
        
        /// <remarks/>
        FILE_INTEGRITY_FAILURE,
        
        /// <remarks/>
        FILE_FORMAT_UNSUPPORTED,
        
        /// <remarks/>
        FILE_FORMAT_EXCEPTION,
        
        /// <remarks/>
        FILE_FORMAT_UNKNOWN,
        
        /// <remarks/>
        FILE_DOWNLOAD_ERROR,
        
        /// <remarks/>
        FILE_VALIDATE_ERROR,
        
        /// <remarks/>
        FILE_OPEN_ERROR,
        
        /// <remarks/>
        FILE_THUMB_ERROR,
        
        /// <remarks/>
        DATABASE_RECORD_SAVE,
        
        /// <remarks/>
        DATABASE_QUERY_EXECUTE,
        
        /// <remarks/>
        DATABASE_QUERY_RESULT_SAVE,
        
        /// <remarks/>
        NUMBER_COUNTRY_UNKNOWN,
        
        /// <remarks/>
        NUMBER_NO_DIALING_RULE,
        
        /// <remarks/>
        NUMBER_NO_PRICE_RULE,
        
        /// <remarks/>
        COUNTRY_WRONG_ISO2,
        
        /// <remarks/>
        COUNTRY_NOT_SUPPORTED,
        
        /// <remarks/>
        COUNTRY_NO_ROUTE,
        
        /// <remarks/>
        EMPTY_RESULT,
        
        /// <remarks/>
        NUMBER_BLOCKED,
        
        /// <remarks/>
        NUMBER_UNOBTAINABLE,
        
        /// <remarks/>
        UNALLOCATED_NUMBER,
        
        /// <remarks/>
        INVALID_NUMBER,
        
        /// <remarks/>
        NUMBER_UNSUPPORTED,
        
        /// <remarks/>
        CALL_ABORTED,
        
        /// <remarks/>
        CALL_REJECTED,
        
        /// <remarks/>
        CALL_PLACE_ERROR,
        
        /// <remarks/>
        CALL_CREATE_ERROR,
        
        /// <remarks/>
        LINE_ATTACH,
        
        /// <remarks/>
        LINE_RESET,
        
        /// <remarks/>
        LINE_CAP_FAX,
        
        /// <remarks/>
        LINE_CAP_VOICE,
        
        /// <remarks/>
        LINE_SET_TSID,
        
        /// <remarks/>
        LINE_UNAUTHORIZED,
        
        /// <remarks/>
        LINE_REQUEST_TIMEOUT,
        
        /// <remarks/>
        DESTINATION_UNREACHIBLE,
        
        /// <remarks/>
        DIALING_ERROR,
        
        /// <remarks/>
        GATEWAY_TIMEOUT,
        
        /// <remarks/>
        ISDN_NETWORK_FAILURE,
        
        /// <remarks/>
        BUSY,
        
        /// <remarks/>
        NO_ANSWER,
        
        /// <remarks/>
        NO_DIAL_TONE,
        
        /// <remarks/>
        RECEIVER_INCOMPATIBLE,
        
        /// <remarks/>
        TEMPORARILY_UNAVAILABLE,
        
        /// <remarks/>
        TRANSMISSION_ABORTED,
        
        /// <remarks/>
        TRANSMISSION_EARLY_HANGUP,
        
        /// <remarks/>
        TRANSMISSION_ERROR,
        
        /// <remarks/>
        NEGOTIATION_FAILED,
        
        /// <remarks/>
        NOT_FAX_MACHINE,
        
        /// <remarks/>
        VOICE_ANSWER,
        
        /// <remarks/>
        DELIVERY_FAILURE,
        
        /// <remarks/>
        MESSAGE_REFERENCE_DUPLICATE,
        
        /// <remarks/>
        FAXJOB_NOT_FOUND,
        
        /// <remarks/>
        FAXJOB_NOT_FAILED,
        
        /// <remarks/>
        FAXJOB_NOT_WAITING,
        
        /// <remarks/>
        FAXTRANSPORT_NOT_FOUND,
        
        /// <remarks/>
        FAXTRANSPORT_NOT_WAITING,
        
        /// <remarks/>
        CONTAINER_EXISTS,
        
        /// <remarks/>
        CONTAINER_NOT_FOUND,
        
        /// <remarks/>
        CONTAINER_DELETED,
        
        /// <remarks/>
        CONTAINER_ACCESS_DENIED,
        
        /// <remarks/>
        CONTAINER_DOCUMENT_DUPLICATE,
        
        /// <remarks/>
        CONTAINER_PAGES_LIMIT_EXCEEDED,
        
        /// <remarks/>
        COVER_TEMPLATE_NOT_FOUND,
        
        /// <remarks/>
        COVER_TEMPLATE_DELETED,
        
        /// <remarks/>
        COVER_TEMPLATE_ACCESS_DENIED,
        
        /// <remarks/>
        FAXPRICE_NOT_FOUND,
        
        /// <remarks/>
        RESUBMIT_FAILED,
        
        /// <remarks/>
        DID_NUMBER_LOCKED,
        
        /// <remarks/>
        DID_SOURCE_NOT_FAXIN,
        
        /// <remarks/>
        DID_CUSTOMER_NOT_MATCH,
        
        /// <remarks/>
        DID_WRONG_FAXIN_STATE,
        
        /// <remarks/>
        DID_GROUP_NOT_CONNECTED,
        
        /// <remarks/>
        DID_EXTEND_TOO_EARLY,
        
        /// <remarks/>
        DID_ORDER_PENDING_ACTIVATION,
        
        /// <remarks/>
        FILE_PREVIEW_NOT_READY,
        
        /// <remarks/>
        FILE_CONVERTION_FAILED,
        
        /// <remarks/>
        FILE_PAGES_LIMIT_EXCEEDED,
        
        /// <remarks/>
        COMMON_EMAIL_SEND_ERROR,
        
        /// <remarks/>
        QUEUE_TASK_ABORTED,
        
        /// <remarks/>
        FILE_TIFF_DEPTH_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_FORMAT_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_QUALITY_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_PAGES_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_WIDTH_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_HEIGHT_VALIDATION,
        
        /// <remarks/>
        NUMBER_ADDRESS_NOT_REQUIRED,
        
        /// <remarks/>
        NUMBER_OUT_OF_STOCK,
        
        /// <remarks/>
        NUMBER_GROUP_NOT_AVAILABLE,
        
        /// <remarks/>
        NUMBER_ORDER_FAILURE,
        
        /// <remarks/>
        NUMBER_SETUP_FAILURE,
        
        /// <remarks/>
        NUMBER_ADDRESS_FAILURE,
        
        /// <remarks/>
        NUMBER_PROVIDER_NOT_RECOGNIZED,
        
        /// <remarks/>
        SESSION_TOKEN_MISMATCH,
        
        /// <remarks/>
        SESSION_NOT_FOUND,
        
        /// <remarks/>
        SESSION_EXPIRED,
        
        /// <remarks/>
        CONFIRM_TOKEN_NOT_FOUND,
        
        /// <remarks/>
        CONFIRM_TOKEN_TYPE_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_SOURCE_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_USER_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_EXPIRED,
        
        /// <remarks/>
        CONFIRM_TOKEN_VALIDATED,
        
        /// <remarks/>
        CONFIRM_TOKEN_INVALIDATED,
        
        /// <remarks/>
        CONFIRM_TOKEN_CLOSED,
        
        /// <remarks/>
        SEND_SMS_FREQUENCY_EXCEEDED,
        
        /// <remarks/>
        CONTACT_GROUP_IN_USE,
        
        /// <remarks/>
        CONTACT_GROUP_NOT_FOUND,
        
        /// <remarks/>
        CONTACT_GROUP_ACCESS_DENIED,
        
        /// <remarks/>
        CONTACT_ITEM_NOT_FOUND,
        
        /// <remarks/>
        CONTACT_ITEM_ACCESS_DENIED,
        
        /// <remarks/>
        CONTACT_NUMBER_IN_USE,
        
        /// <remarks/>
        NUMBER_ITEM_EXISTS,
        
        /// <remarks/>
        STORAGE_ALREADY_CONNECTED,
        
        /// <remarks/>
        STORAGE_REVOKE_FAILURE,
        
        /// <remarks/>
        STORAGE_NOT_CONNECTED,
        
        /// <remarks/>
        STORAGE_NOT_FOUND,
        
        /// <remarks/>
        INSUFFICIENT_FUNDS,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public partial class ApiResponseDocUpload : ApiResponse {
        
        private string documentRefField;
        
        private FileContentGroup documentTypeField;
        
        private bool documentTypeFieldSpecified;
        
        private long fileSizeField;
        
        private bool fileSizeFieldSpecified;
        
        private string fileCheckField;
        
        private string fileMimeField;
        
        /// <remarks/>
        public string documentRef {
            get {
                return this.documentRefField;
            }
            set {
                this.documentRefField = value;
            }
        }
        
        /// <remarks/>
        public FileContentGroup documentType {
            get {
                return this.documentTypeField;
            }
            set {
                this.documentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool documentTypeSpecified {
            get {
                return this.documentTypeFieldSpecified;
            }
            set {
                this.documentTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool fileSizeSpecified {
            get {
                return this.fileSizeFieldSpecified;
            }
            set {
                this.fileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string fileCheck {
            get {
                return this.fileCheckField;
            }
            set {
                this.fileCheckField = value;
            }
        }
        
        /// <remarks/>
        public string fileMime {
            get {
                return this.fileMimeField;
            }
            set {
                this.fileMimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public enum FileContentGroup {
        
        /// <remarks/>
        UNK,
        
        /// <remarks/>
        PDF,
        
        /// <remarks/>
        TIFF,
        
        /// <remarks/>
        IMAGE,
        
        /// <remarks/>
        MS_OFFICE,
        
        /// <remarks/>
        OP_OFFICE,
        
        /// <remarks/>
        ST_OFFICE,
        
        /// <remarks/>
        PLAIN_TEXT,
        
        /// <remarks/>
        OTHER,
        
        /// <remarks/>
        HTML,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseDocPreview))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public partial class ApiResponseFileDownload : ApiResponse {
        
        private FaxFile documentField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public FaxFile Document {
            get {
                return this.documentField;
            }
            set {
                this.documentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public partial class FaxFile {
        
        private string fileNameField;
        
        private string fileMimeField;
        
        private long fileSizeField;
        
        private bool fileSizeFieldSpecified;
        
        private string fileCheckField;
        
        private byte[] fileDataField;
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string fileMime {
            get {
                return this.fileMimeField;
            }
            set {
                this.fileMimeField = value;
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool fileSizeSpecified {
            get {
                return this.fileSizeFieldSpecified;
            }
            set {
                this.fileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string fileCheck {
            get {
                return this.fileCheckField;
            }
            set {
                this.fileCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] fileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public partial class ApiResponseDocPreview : ApiResponseFileDownload {
        
        private int pagesField;
        
        private bool pagesFieldSpecified;
        
        /// <remarks/>
        public int pages {
            get {
                return this.pagesField;
            }
            set {
                this.pagesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool pagesSpecified {
            get {
                return this.pagesFieldSpecified;
            }
            set {
                this.pagesFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public partial class FaxDocument {
        
        private string documentRefField;
        
        private FaxFile documentFileField;
        
        /// <remarks/>
        public string documentRef {
            get {
                return this.documentRefField;
            }
            set {
                this.documentRefField = value;
            }
        }
        
        /// <remarks/>
        public FaxFile documentFile {
            get {
                return this.documentFileField;
            }
            set {
                this.documentFileField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public enum FaxQuality {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        BASIC,
        
        /// <remarks/>
        STANDARD,
        
        /// <remarks/>
        FINE,
        
        /// <remarks/>
        SUPER_FINE,
        
        /// <remarks/>
        ULTRA_FINE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceDocument")]
    public enum FaxMode {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        TEXT,
        
        /// <remarks/>
        PHOTO,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void uploadDocumentCompletedEventHandler(object sender, uploadDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseDocUpload Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseDocUpload)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void downloadDocumentCompletedEventHandler(object sender, downloadDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseFileDownload Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseFileDownload)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deleteDocumentsCompletedEventHandler(object sender, deleteDocumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteDocumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteDocumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void checkDocumentCompletedEventHandler(object sender, checkDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseDocUpload Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseDocUpload)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getDocumentPreviewCompletedEventHandler(object sender, getDocumentPreviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentPreviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentPreviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseDocPreview Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseDocPreview)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591