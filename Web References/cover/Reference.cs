//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ApiSampleFramework.cover {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ApiServiceCoverSoap", Namespace="urn:ApiServiceCover")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(FaxCover))]
    public partial class ApiServiceCover : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private UsernameToken usernameTokenValueField;
        
        private System.Threading.SendOrPostCallback addCoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback downloadCoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback listCoversOperationCompleted;
        
        private System.Threading.SendOrPostCallback renameCoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback reloadCoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteCoverOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCoverPreviewOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ApiServiceCover() {
            this.Url = global::ApiSampleFramework.Properties.Settings.Default.ApiSampleFramework_cover_ApiServiceCover;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public UsernameToken UsernameTokenValue {
            get {
                return this.usernameTokenValueField;
            }
            set {
                this.usernameTokenValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event addCoverCompletedEventHandler addCoverCompleted;
        
        /// <remarks/>
        public event downloadCoverCompletedEventHandler downloadCoverCompleted;
        
        /// <remarks/>
        public event getCoverCompletedEventHandler getCoverCompleted;
        
        /// <remarks/>
        public event listCoversCompletedEventHandler listCoversCompleted;
        
        /// <remarks/>
        public event renameCoverCompletedEventHandler renameCoverCompleted;
        
        /// <remarks/>
        public event reloadCoverCompletedEventHandler reloadCoverCompleted;
        
        /// <remarks/>
        public event deleteCoverCompletedEventHandler deleteCoverCompleted;
        
        /// <remarks/>
        public event getCoverPreviewCompletedEventHandler getCoverPreviewCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#addCover", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseCoverUpload addCover(string title, FaxFile file) {
            object[] results = this.Invoke("addCover", new object[] {
                        title,
                        file});
            return ((ApiResponseCoverUpload)(results[0]));
        }
        
        /// <remarks/>
        public void addCoverAsync(string title, FaxFile file) {
            this.addCoverAsync(title, file, null);
        }
        
        /// <remarks/>
        public void addCoverAsync(string title, FaxFile file, object userState) {
            if ((this.addCoverOperationCompleted == null)) {
                this.addCoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddCoverOperationCompleted);
            }
            this.InvokeAsync("addCover", new object[] {
                        title,
                        file}, this.addCoverOperationCompleted, userState);
        }
        
        private void OnaddCoverOperationCompleted(object arg) {
            if ((this.addCoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addCoverCompleted(this, new addCoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#downloadCover", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseFileDownload downloadCover(string coverRef) {
            object[] results = this.Invoke("downloadCover", new object[] {
                        coverRef});
            return ((ApiResponseFileDownload)(results[0]));
        }
        
        /// <remarks/>
        public void downloadCoverAsync(string coverRef) {
            this.downloadCoverAsync(coverRef, null);
        }
        
        /// <remarks/>
        public void downloadCoverAsync(string coverRef, object userState) {
            if ((this.downloadCoverOperationCompleted == null)) {
                this.downloadCoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OndownloadCoverOperationCompleted);
            }
            this.InvokeAsync("downloadCover", new object[] {
                        coverRef}, this.downloadCoverOperationCompleted, userState);
        }
        
        private void OndownloadCoverOperationCompleted(object arg) {
            if ((this.downloadCoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.downloadCoverCompleted(this, new downloadCoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#getCover", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseListCovers getCover(string coverRef) {
            object[] results = this.Invoke("getCover", new object[] {
                        coverRef});
            return ((ApiResponseListCovers)(results[0]));
        }
        
        /// <remarks/>
        public void getCoverAsync(string coverRef) {
            this.getCoverAsync(coverRef, null);
        }
        
        /// <remarks/>
        public void getCoverAsync(string coverRef, object userState) {
            if ((this.getCoverOperationCompleted == null)) {
                this.getCoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCoverOperationCompleted);
            }
            this.InvokeAsync("getCover", new object[] {
                        coverRef}, this.getCoverOperationCompleted, userState);
        }
        
        private void OngetCoverOperationCompleted(object arg) {
            if ((this.getCoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCoverCompleted(this, new getCoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#listCovers", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseListCovers listCovers() {
            object[] results = this.Invoke("listCovers", new object[0]);
            return ((ApiResponseListCovers)(results[0]));
        }
        
        /// <remarks/>
        public void listCoversAsync() {
            this.listCoversAsync(null);
        }
        
        /// <remarks/>
        public void listCoversAsync(object userState) {
            if ((this.listCoversOperationCompleted == null)) {
                this.listCoversOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlistCoversOperationCompleted);
            }
            this.InvokeAsync("listCovers", new object[0], this.listCoversOperationCompleted, userState);
        }
        
        private void OnlistCoversOperationCompleted(object arg) {
            if ((this.listCoversCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.listCoversCompleted(this, new listCoversCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#renameCover", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponse renameCover(string coverRef, string title) {
            object[] results = this.Invoke("renameCover", new object[] {
                        coverRef,
                        title});
            return ((ApiResponse)(results[0]));
        }
        
        /// <remarks/>
        public void renameCoverAsync(string coverRef, string title) {
            this.renameCoverAsync(coverRef, title, null);
        }
        
        /// <remarks/>
        public void renameCoverAsync(string coverRef, string title, object userState) {
            if ((this.renameCoverOperationCompleted == null)) {
                this.renameCoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrenameCoverOperationCompleted);
            }
            this.InvokeAsync("renameCover", new object[] {
                        coverRef,
                        title}, this.renameCoverOperationCompleted, userState);
        }
        
        private void OnrenameCoverOperationCompleted(object arg) {
            if ((this.renameCoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.renameCoverCompleted(this, new renameCoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#reloadCover", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponse reloadCover(string coverRef, FaxFile file) {
            object[] results = this.Invoke("reloadCover", new object[] {
                        coverRef,
                        file});
            return ((ApiResponse)(results[0]));
        }
        
        /// <remarks/>
        public void reloadCoverAsync(string coverRef, FaxFile file) {
            this.reloadCoverAsync(coverRef, file, null);
        }
        
        /// <remarks/>
        public void reloadCoverAsync(string coverRef, FaxFile file, object userState) {
            if ((this.reloadCoverOperationCompleted == null)) {
                this.reloadCoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreloadCoverOperationCompleted);
            }
            this.InvokeAsync("reloadCover", new object[] {
                        coverRef,
                        file}, this.reloadCoverOperationCompleted, userState);
        }
        
        private void OnreloadCoverOperationCompleted(object arg) {
            if ((this.reloadCoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reloadCoverCompleted(this, new reloadCoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#deleteCover", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponse deleteCover(string coverRef) {
            object[] results = this.Invoke("deleteCover", new object[] {
                        coverRef});
            return ((ApiResponse)(results[0]));
        }
        
        /// <remarks/>
        public void deleteCoverAsync(string coverRef) {
            this.deleteCoverAsync(coverRef, null);
        }
        
        /// <remarks/>
        public void deleteCoverAsync(string coverRef, object userState) {
            if ((this.deleteCoverOperationCompleted == null)) {
                this.deleteCoverOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteCoverOperationCompleted);
            }
            this.InvokeAsync("deleteCover", new object[] {
                        coverRef}, this.deleteCoverOperationCompleted, userState);
        }
        
        private void OndeleteCoverOperationCompleted(object arg) {
            if ((this.deleteCoverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCoverCompleted(this, new deleteCoverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UsernameTokenValue")]
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("#getCoverPreview", RequestNamespace="urn:ApiServiceCover", ResponseNamespace="urn:ApiServiceCover")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public ApiResponseFileDownload getCoverPreview(string coverRef) {
            object[] results = this.Invoke("getCoverPreview", new object[] {
                        coverRef});
            return ((ApiResponseFileDownload)(results[0]));
        }
        
        /// <remarks/>
        public void getCoverPreviewAsync(string coverRef) {
            this.getCoverPreviewAsync(coverRef, null);
        }
        
        /// <remarks/>
        public void getCoverPreviewAsync(string coverRef, object userState) {
            if ((this.getCoverPreviewOperationCompleted == null)) {
                this.getCoverPreviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCoverPreviewOperationCompleted);
            }
            this.InvokeAsync("getCoverPreview", new object[] {
                        coverRef}, this.getCoverPreviewOperationCompleted, userState);
        }
        
        private void OngetCoverPreviewOperationCompleted(object arg) {
            if ((this.getCoverPreviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCoverPreviewCompleted(this, new getCoverPreviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class UsernameToken : SoapHeader {
        
        private string usernameField;
        
        private string passwordField;
        
        /// <remarks/>
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
            }
        }
        
        /// <remarks/>
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class FaxCover {
        
        private string coverRefField;
        
        private string coverTitleField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string coverRef {
            get {
                return this.coverRefField;
            }
            set {
                this.coverRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string coverTitle {
            get {
                return this.coverTitleField;
            }
            set {
                this.coverTitleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseCoverUpload))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseListCovers))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(ApiResponseFileDownload))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponse {
        
        private StateCodes stateCodeField;
        
        private string stateMessageField;
        
        /// <remarks/>
        public StateCodes stateCode {
            get {
                return this.stateCodeField;
            }
            set {
                this.stateCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public string stateMessage {
            get {
                return this.stateMessageField;
            }
            set {
                this.stateMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public enum StateCodes {
        
        /// <remarks/>
        SUCCESS,
        
        /// <remarks/>
        API_FUNCTION_MISSING,
        
        /// <remarks/>
        API_FUNCTION_UNKNOWN,
        
        /// <remarks/>
        API_FUNCTION_ACCESS_DENIED,
        
        /// <remarks/>
        API_AGENT_MISSING,
        
        /// <remarks/>
        API_AGENT_NOT_FOUND,
        
        /// <remarks/>
        API_AGENT_DEACTIVATED,
        
        /// <remarks/>
        API_AGENT_KEY_NOT_MATCH,
        
        /// <remarks/>
        API_CUSTOMER_MISSING,
        
        /// <remarks/>
        API_CUSTOMER_NOT_FOUND,
        
        /// <remarks/>
        API_CUSTOMER_DEACTIVATED,
        
        /// <remarks/>
        API_CUSTOMER_KEY_NOT_MATCH,
        
        /// <remarks/>
        API_CUSTOMER_FEATURE_ACCESS_DENIED,
        
        /// <remarks/>
        API_KEY_MISSING,
        
        /// <remarks/>
        API_KEY_NOT_FOUND,
        
        /// <remarks/>
        API_KEY_DEACTIVATED,
        
        /// <remarks/>
        API_KEY_SECRET_NOT_MATCH,
        
        /// <remarks/>
        API_REQUEST_INCOMPLETE,
        
        /// <remarks/>
        API_REQUEST_FAILURE,
        
        /// <remarks/>
        API_REQUEST_VALIDATE,
        
        /// <remarks/>
        FILE_NOT_FOUND,
        
        /// <remarks/>
        FILE_DELETED,
        
        /// <remarks/>
        FILE_ACCESS_DENIED,
        
        /// <remarks/>
        FILE_STORAGE_MISSING,
        
        /// <remarks/>
        FILE_STORAGE_SIZE_MISMATCH,
        
        /// <remarks/>
        FILE_STORAGE_READ_ERROR,
        
        /// <remarks/>
        FILE_EXISTS,
        
        /// <remarks/>
        CUSTOMER_DELETED,
        
        /// <remarks/>
        CUSTOMER_NOT_CONFIRMED,
        
        /// <remarks/>
        CUSTOMER_BLOCKED,
        
        /// <remarks/>
        CUSTOMER_INACTIVE,
        
        /// <remarks/>
        CUSTOMER_WRONG_PASSWORD,
        
        /// <remarks/>
        CUSTOMER_PASSWORD_NOT_MATCH,
        
        /// <remarks/>
        CUSTOMER_CURRENT_PASSWORD_NOT_MATCH,
        
        /// <remarks/>
        CUSTOMER_EMAIL_IN_USE,
        
        /// <remarks/>
        CUSTOMER_SOCIAL_IN_USE,
        
        /// <remarks/>
        FILE_REFERENCE_DUPLICATE,
        
        /// <remarks/>
        FILE_STORAGE_COPY,
        
        /// <remarks/>
        FILE_INTEGRITY_FAILURE,
        
        /// <remarks/>
        FILE_FORMAT_UNSUPPORTED,
        
        /// <remarks/>
        FILE_FORMAT_EXCEPTION,
        
        /// <remarks/>
        FILE_FORMAT_UNKNOWN,
        
        /// <remarks/>
        FILE_DOWNLOAD_ERROR,
        
        /// <remarks/>
        FILE_VALIDATE_ERROR,
        
        /// <remarks/>
        FILE_OPEN_ERROR,
        
        /// <remarks/>
        FILE_THUMB_ERROR,
        
        /// <remarks/>
        DATABASE_RECORD_SAVE,
        
        /// <remarks/>
        DATABASE_QUERY_EXECUTE,
        
        /// <remarks/>
        DATABASE_QUERY_RESULT_SAVE,
        
        /// <remarks/>
        NUMBER_COUNTRY_UNKNOWN,
        
        /// <remarks/>
        NUMBER_NO_DIALING_RULE,
        
        /// <remarks/>
        NUMBER_NO_PRICE_RULE,
        
        /// <remarks/>
        COUNTRY_WRONG_ISO2,
        
        /// <remarks/>
        COUNTRY_NOT_SUPPORTED,
        
        /// <remarks/>
        COUNTRY_NO_ROUTE,
        
        /// <remarks/>
        EMPTY_RESULT,
        
        /// <remarks/>
        NUMBER_BLOCKED,
        
        /// <remarks/>
        NUMBER_UNOBTAINABLE,
        
        /// <remarks/>
        UNALLOCATED_NUMBER,
        
        /// <remarks/>
        INVALID_NUMBER,
        
        /// <remarks/>
        NUMBER_UNSUPPORTED,
        
        /// <remarks/>
        CALL_ABORTED,
        
        /// <remarks/>
        CALL_REJECTED,
        
        /// <remarks/>
        CALL_PLACE_ERROR,
        
        /// <remarks/>
        CALL_CREATE_ERROR,
        
        /// <remarks/>
        LINE_ATTACH,
        
        /// <remarks/>
        LINE_RESET,
        
        /// <remarks/>
        LINE_CAP_FAX,
        
        /// <remarks/>
        LINE_CAP_VOICE,
        
        /// <remarks/>
        LINE_SET_TSID,
        
        /// <remarks/>
        LINE_UNAUTHORIZED,
        
        /// <remarks/>
        LINE_REQUEST_TIMEOUT,
        
        /// <remarks/>
        DESTINATION_UNREACHIBLE,
        
        /// <remarks/>
        DIALING_ERROR,
        
        /// <remarks/>
        GATEWAY_TIMEOUT,
        
        /// <remarks/>
        ISDN_NETWORK_FAILURE,
        
        /// <remarks/>
        BUSY,
        
        /// <remarks/>
        NO_ANSWER,
        
        /// <remarks/>
        NO_DIAL_TONE,
        
        /// <remarks/>
        RECEIVER_INCOMPATIBLE,
        
        /// <remarks/>
        TEMPORARILY_UNAVAILABLE,
        
        /// <remarks/>
        TRANSMISSION_ABORTED,
        
        /// <remarks/>
        TRANSMISSION_EARLY_HANGUP,
        
        /// <remarks/>
        TRANSMISSION_ERROR,
        
        /// <remarks/>
        NEGOTIATION_FAILED,
        
        /// <remarks/>
        NOT_FAX_MACHINE,
        
        /// <remarks/>
        VOICE_ANSWER,
        
        /// <remarks/>
        DELIVERY_FAILURE,
        
        /// <remarks/>
        MESSAGE_REFERENCE_DUPLICATE,
        
        /// <remarks/>
        FAXJOB_NOT_FOUND,
        
        /// <remarks/>
        FAXJOB_NOT_FAILED,
        
        /// <remarks/>
        FAXJOB_NOT_WAITING,
        
        /// <remarks/>
        FAXTRANSPORT_NOT_FOUND,
        
        /// <remarks/>
        FAXTRANSPORT_NOT_WAITING,
        
        /// <remarks/>
        CONTAINER_EXISTS,
        
        /// <remarks/>
        CONTAINER_NOT_FOUND,
        
        /// <remarks/>
        CONTAINER_DELETED,
        
        /// <remarks/>
        CONTAINER_ACCESS_DENIED,
        
        /// <remarks/>
        CONTAINER_DOCUMENT_DUPLICATE,
        
        /// <remarks/>
        CONTAINER_PAGES_LIMIT_EXCEEDED,
        
        /// <remarks/>
        COVER_TEMPLATE_NOT_FOUND,
        
        /// <remarks/>
        COVER_TEMPLATE_DELETED,
        
        /// <remarks/>
        COVER_TEMPLATE_ACCESS_DENIED,
        
        /// <remarks/>
        FAXPRICE_NOT_FOUND,
        
        /// <remarks/>
        RESUBMIT_FAILED,
        
        /// <remarks/>
        DID_NUMBER_LOCKED,
        
        /// <remarks/>
        DID_SOURCE_NOT_FAXIN,
        
        /// <remarks/>
        DID_CUSTOMER_NOT_MATCH,
        
        /// <remarks/>
        DID_WRONG_FAXIN_STATE,
        
        /// <remarks/>
        DID_GROUP_NOT_CONNECTED,
        
        /// <remarks/>
        DID_EXTEND_TOO_EARLY,
        
        /// <remarks/>
        DID_ORDER_PENDING_ACTIVATION,
        
        /// <remarks/>
        FILE_PREVIEW_NOT_READY,
        
        /// <remarks/>
        FILE_CONVERTION_FAILED,
        
        /// <remarks/>
        FILE_PAGES_LIMIT_EXCEEDED,
        
        /// <remarks/>
        COMMON_EMAIL_SEND_ERROR,
        
        /// <remarks/>
        QUEUE_TASK_ABORTED,
        
        /// <remarks/>
        FILE_TIFF_DEPTH_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_FORMAT_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_QUALITY_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_PAGES_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_WIDTH_VALIDATION,
        
        /// <remarks/>
        FILE_TIFF_HEIGHT_VALIDATION,
        
        /// <remarks/>
        NUMBER_ADDRESS_NOT_REQUIRED,
        
        /// <remarks/>
        NUMBER_OUT_OF_STOCK,
        
        /// <remarks/>
        NUMBER_GROUP_NOT_AVAILABLE,
        
        /// <remarks/>
        NUMBER_ORDER_FAILURE,
        
        /// <remarks/>
        NUMBER_SETUP_FAILURE,
        
        /// <remarks/>
        NUMBER_ADDRESS_FAILURE,
        
        /// <remarks/>
        NUMBER_PROVIDER_NOT_RECOGNIZED,
        
        /// <remarks/>
        SESSION_TOKEN_MISMATCH,
        
        /// <remarks/>
        SESSION_NOT_FOUND,
        
        /// <remarks/>
        SESSION_EXPIRED,
        
        /// <remarks/>
        CONFIRM_TOKEN_NOT_FOUND,
        
        /// <remarks/>
        CONFIRM_TOKEN_TYPE_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_SOURCE_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_USER_MISMATCH,
        
        /// <remarks/>
        CONFIRM_TOKEN_EXPIRED,
        
        /// <remarks/>
        CONFIRM_TOKEN_VALIDATED,
        
        /// <remarks/>
        CONFIRM_TOKEN_INVALIDATED,
        
        /// <remarks/>
        CONFIRM_TOKEN_CLOSED,
        
        /// <remarks/>
        SEND_SMS_FREQUENCY_EXCEEDED,
        
        /// <remarks/>
        CONTACT_GROUP_IN_USE,
        
        /// <remarks/>
        CONTACT_GROUP_NOT_FOUND,
        
        /// <remarks/>
        CONTACT_GROUP_ACCESS_DENIED,
        
        /// <remarks/>
        CONTACT_ITEM_NOT_FOUND,
        
        /// <remarks/>
        CONTACT_ITEM_ACCESS_DENIED,
        
        /// <remarks/>
        CONTACT_NUMBER_IN_USE,
        
        /// <remarks/>
        NUMBER_ITEM_EXISTS,
        
        /// <remarks/>
        STORAGE_ALREADY_CONNECTED,
        
        /// <remarks/>
        STORAGE_REVOKE_FAILURE,
        
        /// <remarks/>
        STORAGE_NOT_CONNECTED,
        
        /// <remarks/>
        STORAGE_NOT_FOUND,
        
        /// <remarks/>
        INSUFFICIENT_FUNDS,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponseCoverUpload : ApiResponse {
        
        private string coverRefField;
        
        private long fileSizeField;
        
        private bool fileSizeFieldSpecified;
        
        private string fileCheckField;
        
        private string fileMimeField;
        
        /// <remarks/>
        public string coverRef {
            get {
                return this.coverRefField;
            }
            set {
                this.coverRefField = value;
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool fileSizeSpecified {
            get {
                return this.fileSizeFieldSpecified;
            }
            set {
                this.fileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string fileCheck {
            get {
                return this.fileCheckField;
            }
            set {
                this.fileCheckField = value;
            }
        }
        
        /// <remarks/>
        public string fileMime {
            get {
                return this.fileMimeField;
            }
            set {
                this.fileMimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponseListCovers : ApiResponse {
        
        private int countResultField;
        
        private bool countResultFieldSpecified;
        
        private int countTotalField;
        
        private bool countTotalFieldSpecified;
        
        private FaxCover[] itemsField;
        
        /// <remarks/>
        public int countResult {
            get {
                return this.countResultField;
            }
            set {
                this.countResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool countResultSpecified {
            get {
                return this.countResultFieldSpecified;
            }
            set {
                this.countResultFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public int countTotal {
            get {
                return this.countTotalField;
            }
            set {
                this.countTotalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool countTotalSpecified {
            get {
                return this.countTotalFieldSpecified;
            }
            set {
                this.countTotalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public FaxCover[] items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class ApiResponseFileDownload : ApiResponse {
        
        private FaxFile documentField;
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(IsNullable=true)]
        public FaxFile Document {
            get {
                return this.documentField;
            }
            set {
                this.documentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="urn:ApiServiceCover")]
    public partial class FaxFile {
        
        private string fileNameField;
        
        private string fileMimeField;
        
        private long fileSizeField;
        
        private bool fileSizeFieldSpecified;
        
        private string fileCheckField;
        
        private byte[] fileDataField;
        
        /// <remarks/>
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string fileMime {
            get {
                return this.fileMimeField;
            }
            set {
                this.fileMimeField = value;
            }
        }
        
        /// <remarks/>
        public long fileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapIgnoreAttribute()]
        public bool fileSizeSpecified {
            get {
                return this.fileSizeFieldSpecified;
            }
            set {
                this.fileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string fileCheck {
            get {
                return this.fileCheckField;
            }
            set {
                this.fileCheckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")]
        public byte[] fileData {
            get {
                return this.fileDataField;
            }
            set {
                this.fileDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void addCoverCompletedEventHandler(object sender, addCoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addCoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addCoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseCoverUpload Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseCoverUpload)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void downloadCoverCompletedEventHandler(object sender, downloadCoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class downloadCoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal downloadCoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseFileDownload Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseFileDownload)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getCoverCompletedEventHandler(object sender, getCoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseListCovers Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseListCovers)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void listCoversCompletedEventHandler(object sender, listCoversCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class listCoversCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal listCoversCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseListCovers Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseListCovers)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void renameCoverCompletedEventHandler(object sender, renameCoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class renameCoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal renameCoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void reloadCoverCompletedEventHandler(object sender, reloadCoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reloadCoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal reloadCoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void deleteCoverCompletedEventHandler(object sender, deleteCoverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteCoverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteCoverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponse Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponse)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void getCoverPreviewCompletedEventHandler(object sender, getCoverPreviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCoverPreviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCoverPreviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ApiResponseFileDownload Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ApiResponseFileDownload)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591